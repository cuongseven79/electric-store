"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/currency.js";
exports.ids = ["vendor-chunks/currency.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/currency.js/dist/currency.es.js":
/*!******************************************************!*\
  !*** ./node_modules/currency.js/dist/currency.es.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * currency.js - v2.0.4\n * http://scurker.github.io/currency.js\n *\n * Copyright (c) 2021 Jason Wilson\n * Released under MIT license\n */\n\nvar defaults = {\n  symbol: '$',\n  separator: ',',\n  decimal: '.',\n  errorOnInvalid: false,\n  precision: 2,\n  pattern: '!#',\n  negativePattern: '-!#',\n  format: format,\n  fromCents: false\n};\n\nvar round = function round(v) {\n  return Math.round(v);\n};\n\nvar pow = function pow(p) {\n  return Math.pow(10, p);\n};\n\nvar rounding = function rounding(value, increment) {\n  return round(value / increment) * increment;\n};\n\nvar groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\nvar vedicRegex = /(\\d)(?=(\\d\\d)+\\d\\b)/g;\n/**\n * Create a new instance of currency.js\n * @param {number|string|currency} value\n * @param {object} [opts]\n */\n\nfunction currency(value, opts) {\n  var that = this;\n\n  if (!(that instanceof currency)) {\n    return new currency(value, opts);\n  }\n\n  var settings = Object.assign({}, defaults, opts),\n      precision = pow(settings.precision),\n      v = parse(value, settings);\n  that.intValue = v;\n  that.value = v / precision; // Set default incremental value\n\n  settings.increment = settings.increment || 1 / precision; // Support vedic numbering systems\n  // see: https://en.wikipedia.org/wiki/Indian_numbering_system\n\n  if (settings.useVedic) {\n    settings.groups = vedicRegex;\n  } else {\n    settings.groups = groupRegex;\n  } // Intended for internal usage only - subject to change\n\n\n  this.s = settings;\n  this.p = precision;\n}\n\nfunction parse(value, opts) {\n  var useRounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var v = 0,\n      decimal = opts.decimal,\n      errorOnInvalid = opts.errorOnInvalid,\n      decimals = opts.precision,\n      fromCents = opts.fromCents,\n      precision = pow(decimals),\n      isNumber = typeof value === 'number',\n      isCurrency = value instanceof currency;\n\n  if (isCurrency && fromCents) {\n    return value.intValue;\n  }\n\n  if (isNumber || isCurrency) {\n    v = isCurrency ? value.value : value;\n  } else if (typeof value === 'string') {\n    var regex = new RegExp('[^-\\\\d' + decimal + ']', 'g'),\n        decimalString = new RegExp('\\\\' + decimal, 'g');\n    v = value.replace(/\\((.*)\\)/, '-$1') // allow negative e.g. (1.99)\n    .replace(regex, '') // replace any non numeric values\n    .replace(decimalString, '.'); // convert any decimal values\n\n    v = v || 0;\n  } else {\n    if (errorOnInvalid) {\n      throw Error('Invalid Input');\n    }\n\n    v = 0;\n  }\n\n  if (!fromCents) {\n    v *= precision; // scale number to integer value\n\n    v = v.toFixed(4); // Handle additional decimal for proper rounding.\n  }\n\n  return useRounding ? round(v) : v;\n}\n/**\n * Formats a currency object\n * @param currency\n * @param {object} [opts]\n */\n\n\nfunction format(currency, settings) {\n  var pattern = settings.pattern,\n      negativePattern = settings.negativePattern,\n      symbol = settings.symbol,\n      separator = settings.separator,\n      decimal = settings.decimal,\n      groups = settings.groups,\n      split = ('' + currency).replace(/^-/, '').split('.'),\n      dollars = split[0],\n      cents = split[1];\n  return (currency.value >= 0 ? pattern : negativePattern).replace('!', symbol).replace('#', dollars.replace(groups, '$1' + separator) + (cents ? decimal + cents : ''));\n}\n\ncurrency.prototype = {\n  /**\n   * Adds values together.\n   * @param {number} number\n   * @returns {currency}\n   */\n  add: function add(number) {\n    var intValue = this.intValue,\n        _settings = this.s,\n        _precision = this.p;\n    return currency((intValue += parse(number, _settings)) / (_settings.fromCents ? 1 : _precision), _settings);\n  },\n\n  /**\n   * Subtracts value.\n   * @param {number} number\n   * @returns {currency}\n   */\n  subtract: function subtract(number) {\n    var intValue = this.intValue,\n        _settings = this.s,\n        _precision = this.p;\n    return currency((intValue -= parse(number, _settings)) / (_settings.fromCents ? 1 : _precision), _settings);\n  },\n\n  /**\n   * Multiplies values.\n   * @param {number} number\n   * @returns {currency}\n   */\n  multiply: function multiply(number) {\n    var intValue = this.intValue,\n        _settings = this.s;\n    return currency((intValue *= number) / (_settings.fromCents ? 1 : pow(_settings.precision)), _settings);\n  },\n\n  /**\n   * Divides value.\n   * @param {number} number\n   * @returns {currency}\n   */\n  divide: function divide(number) {\n    var intValue = this.intValue,\n        _settings = this.s;\n    return currency(intValue /= parse(number, _settings, false), _settings);\n  },\n\n  /**\n   * Takes the currency amount and distributes the values evenly. Any extra pennies\n   * left over from the distribution will be stacked onto the first set of entries.\n   * @param {number} count\n   * @returns {array}\n   */\n  distribute: function distribute(count) {\n    var intValue = this.intValue,\n        _precision = this.p,\n        _settings = this.s,\n        distribution = [],\n        split = Math[intValue >= 0 ? 'floor' : 'ceil'](intValue / count),\n        pennies = Math.abs(intValue - split * count),\n        precision = _settings.fromCents ? 1 : _precision;\n\n    for (; count !== 0; count--) {\n      var item = currency(split / precision, _settings); // Add any left over pennies\n\n      pennies-- > 0 && (item = item[intValue >= 0 ? 'add' : 'subtract'](1 / precision));\n      distribution.push(item);\n    }\n\n    return distribution;\n  },\n\n  /**\n   * Returns the dollar value.\n   * @returns {number}\n   */\n  dollars: function dollars() {\n    return ~~this.value;\n  },\n\n  /**\n   * Returns the cent value.\n   * @returns {number}\n   */\n  cents: function cents() {\n    var intValue = this.intValue,\n        _precision = this.p;\n    return ~~(intValue % _precision);\n  },\n\n  /**\n   * Formats the value as a string according to the formatting settings.\n   * @param {boolean} useSymbol - format with currency symbol\n   * @returns {string}\n   */\n  format: function format(options) {\n    var _settings = this.s;\n\n    if (typeof options === 'function') {\n      return options(this, _settings);\n    }\n\n    return _settings.format(this, Object.assign({}, _settings, options));\n  },\n\n  /**\n   * Formats the value as a string according to the formatting settings.\n   * @returns {string}\n   */\n  toString: function toString() {\n    var intValue = this.intValue,\n        _precision = this.p,\n        _settings = this.s;\n    return rounding(intValue / _precision, _settings.increment).toFixed(_settings.precision);\n  },\n\n  /**\n   * Value for JSON serialization.\n   * @returns {float}\n   */\n  toJSON: function toJSON() {\n    return this.value;\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (currency);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3VycmVuY3kuanMvZGlzdC9jdXJyZW5jeS5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsRUFBRTtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLHdCQUF3QjtBQUNuQyxXQUFXLFFBQVE7QUFDbkI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qjs7QUFFOUIsNERBQTREO0FBQzVEOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9COztBQUVwQixzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsYUFBYTtBQUN4Qix5REFBeUQ7O0FBRXpEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QixlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrREFBa0Q7QUFDbEQsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jdXJyZW5jeS5qcy9kaXN0L2N1cnJlbmN5LmVzLmpzPzZkMDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBjdXJyZW5jeS5qcyAtIHYyLjAuNFxuICogaHR0cDovL3NjdXJrZXIuZ2l0aHViLmlvL2N1cnJlbmN5LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDIxIEphc29uIFdpbHNvblxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqL1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHN5bWJvbDogJyQnLFxuICBzZXBhcmF0b3I6ICcsJyxcbiAgZGVjaW1hbDogJy4nLFxuICBlcnJvck9uSW52YWxpZDogZmFsc2UsXG4gIHByZWNpc2lvbjogMixcbiAgcGF0dGVybjogJyEjJyxcbiAgbmVnYXRpdmVQYXR0ZXJuOiAnLSEjJyxcbiAgZm9ybWF0OiBmb3JtYXQsXG4gIGZyb21DZW50czogZmFsc2Vcbn07XG5cbnZhciByb3VuZCA9IGZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodik7XG59O1xuXG52YXIgcG93ID0gZnVuY3Rpb24gcG93KHApIHtcbiAgcmV0dXJuIE1hdGgucG93KDEwLCBwKTtcbn07XG5cbnZhciByb3VuZGluZyA9IGZ1bmN0aW9uIHJvdW5kaW5nKHZhbHVlLCBpbmNyZW1lbnQpIHtcbiAgcmV0dXJuIHJvdW5kKHZhbHVlIC8gaW5jcmVtZW50KSAqIGluY3JlbWVudDtcbn07XG5cbnZhciBncm91cFJlZ2V4ID0gLyhcXGQpKD89KFxcZHszfSkrXFxiKS9nO1xudmFyIHZlZGljUmVnZXggPSAvKFxcZCkoPz0oXFxkXFxkKStcXGRcXGIpL2c7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBjdXJyZW5jeS5qc1xuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfGN1cnJlbmN5fSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRzXVxuICovXG5cbmZ1bmN0aW9uIGN1cnJlbmN5KHZhbHVlLCBvcHRzKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcblxuICBpZiAoISh0aGF0IGluc3RhbmNlb2YgY3VycmVuY3kpKSB7XG4gICAgcmV0dXJuIG5ldyBjdXJyZW5jeSh2YWx1ZSwgb3B0cyk7XG4gIH1cblxuICB2YXIgc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0cyksXG4gICAgICBwcmVjaXNpb24gPSBwb3coc2V0dGluZ3MucHJlY2lzaW9uKSxcbiAgICAgIHYgPSBwYXJzZSh2YWx1ZSwgc2V0dGluZ3MpO1xuICB0aGF0LmludFZhbHVlID0gdjtcbiAgdGhhdC52YWx1ZSA9IHYgLyBwcmVjaXNpb247IC8vIFNldCBkZWZhdWx0IGluY3JlbWVudGFsIHZhbHVlXG5cbiAgc2V0dGluZ3MuaW5jcmVtZW50ID0gc2V0dGluZ3MuaW5jcmVtZW50IHx8IDEgLyBwcmVjaXNpb247IC8vIFN1cHBvcnQgdmVkaWMgbnVtYmVyaW5nIHN5c3RlbXNcbiAgLy8gc2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbmRpYW5fbnVtYmVyaW5nX3N5c3RlbVxuXG4gIGlmIChzZXR0aW5ncy51c2VWZWRpYykge1xuICAgIHNldHRpbmdzLmdyb3VwcyA9IHZlZGljUmVnZXg7XG4gIH0gZWxzZSB7XG4gICAgc2V0dGluZ3MuZ3JvdXBzID0gZ3JvdXBSZWdleDtcbiAgfSAvLyBJbnRlbmRlZCBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seSAtIHN1YmplY3QgdG8gY2hhbmdlXG5cblxuICB0aGlzLnMgPSBzZXR0aW5ncztcbiAgdGhpcy5wID0gcHJlY2lzaW9uO1xufVxuXG5mdW5jdGlvbiBwYXJzZSh2YWx1ZSwgb3B0cykge1xuICB2YXIgdXNlUm91bmRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gIHZhciB2ID0gMCxcbiAgICAgIGRlY2ltYWwgPSBvcHRzLmRlY2ltYWwsXG4gICAgICBlcnJvck9uSW52YWxpZCA9IG9wdHMuZXJyb3JPbkludmFsaWQsXG4gICAgICBkZWNpbWFscyA9IG9wdHMucHJlY2lzaW9uLFxuICAgICAgZnJvbUNlbnRzID0gb3B0cy5mcm9tQ2VudHMsXG4gICAgICBwcmVjaXNpb24gPSBwb3coZGVjaW1hbHMpLFxuICAgICAgaXNOdW1iZXIgPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgICAgaXNDdXJyZW5jeSA9IHZhbHVlIGluc3RhbmNlb2YgY3VycmVuY3k7XG5cbiAgaWYgKGlzQ3VycmVuY3kgJiYgZnJvbUNlbnRzKSB7XG4gICAgcmV0dXJuIHZhbHVlLmludFZhbHVlO1xuICB9XG5cbiAgaWYgKGlzTnVtYmVyIHx8IGlzQ3VycmVuY3kpIHtcbiAgICB2ID0gaXNDdXJyZW5jeSA/IHZhbHVlLnZhbHVlIDogdmFsdWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ1teLVxcXFxkJyArIGRlY2ltYWwgKyAnXScsICdnJyksXG4gICAgICAgIGRlY2ltYWxTdHJpbmcgPSBuZXcgUmVnRXhwKCdcXFxcJyArIGRlY2ltYWwsICdnJyk7XG4gICAgdiA9IHZhbHVlLnJlcGxhY2UoL1xcKCguKilcXCkvLCAnLSQxJykgLy8gYWxsb3cgbmVnYXRpdmUgZS5nLiAoMS45OSlcbiAgICAucmVwbGFjZShyZWdleCwgJycpIC8vIHJlcGxhY2UgYW55IG5vbiBudW1lcmljIHZhbHVlc1xuICAgIC5yZXBsYWNlKGRlY2ltYWxTdHJpbmcsICcuJyk7IC8vIGNvbnZlcnQgYW55IGRlY2ltYWwgdmFsdWVzXG5cbiAgICB2ID0gdiB8fCAwO1xuICB9IGVsc2Uge1xuICAgIGlmIChlcnJvck9uSW52YWxpZCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgSW5wdXQnKTtcbiAgICB9XG5cbiAgICB2ID0gMDtcbiAgfVxuXG4gIGlmICghZnJvbUNlbnRzKSB7XG4gICAgdiAqPSBwcmVjaXNpb247IC8vIHNjYWxlIG51bWJlciB0byBpbnRlZ2VyIHZhbHVlXG5cbiAgICB2ID0gdi50b0ZpeGVkKDQpOyAvLyBIYW5kbGUgYWRkaXRpb25hbCBkZWNpbWFsIGZvciBwcm9wZXIgcm91bmRpbmcuXG4gIH1cblxuICByZXR1cm4gdXNlUm91bmRpbmcgPyByb3VuZCh2KSA6IHY7XG59XG4vKipcbiAqIEZvcm1hdHMgYSBjdXJyZW5jeSBvYmplY3RcbiAqIEBwYXJhbSBjdXJyZW5jeVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRzXVxuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0KGN1cnJlbmN5LCBzZXR0aW5ncykge1xuICB2YXIgcGF0dGVybiA9IHNldHRpbmdzLnBhdHRlcm4sXG4gICAgICBuZWdhdGl2ZVBhdHRlcm4gPSBzZXR0aW5ncy5uZWdhdGl2ZVBhdHRlcm4sXG4gICAgICBzeW1ib2wgPSBzZXR0aW5ncy5zeW1ib2wsXG4gICAgICBzZXBhcmF0b3IgPSBzZXR0aW5ncy5zZXBhcmF0b3IsXG4gICAgICBkZWNpbWFsID0gc2V0dGluZ3MuZGVjaW1hbCxcbiAgICAgIGdyb3VwcyA9IHNldHRpbmdzLmdyb3VwcyxcbiAgICAgIHNwbGl0ID0gKCcnICsgY3VycmVuY3kpLnJlcGxhY2UoL14tLywgJycpLnNwbGl0KCcuJyksXG4gICAgICBkb2xsYXJzID0gc3BsaXRbMF0sXG4gICAgICBjZW50cyA9IHNwbGl0WzFdO1xuICByZXR1cm4gKGN1cnJlbmN5LnZhbHVlID49IDAgPyBwYXR0ZXJuIDogbmVnYXRpdmVQYXR0ZXJuKS5yZXBsYWNlKCchJywgc3ltYm9sKS5yZXBsYWNlKCcjJywgZG9sbGFycy5yZXBsYWNlKGdyb3VwcywgJyQxJyArIHNlcGFyYXRvcikgKyAoY2VudHMgPyBkZWNpbWFsICsgY2VudHMgOiAnJykpO1xufVxuXG5jdXJyZW5jeS5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiBBZGRzIHZhbHVlcyB0b2dldGhlci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICAgKiBAcmV0dXJucyB7Y3VycmVuY3l9XG4gICAqL1xuICBhZGQ6IGZ1bmN0aW9uIGFkZChudW1iZXIpIHtcbiAgICB2YXIgaW50VmFsdWUgPSB0aGlzLmludFZhbHVlLFxuICAgICAgICBfc2V0dGluZ3MgPSB0aGlzLnMsXG4gICAgICAgIF9wcmVjaXNpb24gPSB0aGlzLnA7XG4gICAgcmV0dXJuIGN1cnJlbmN5KChpbnRWYWx1ZSArPSBwYXJzZShudW1iZXIsIF9zZXR0aW5ncykpIC8gKF9zZXR0aW5ncy5mcm9tQ2VudHMgPyAxIDogX3ByZWNpc2lvbiksIF9zZXR0aW5ncyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICAgKiBAcmV0dXJucyB7Y3VycmVuY3l9XG4gICAqL1xuICBzdWJ0cmFjdDogZnVuY3Rpb24gc3VidHJhY3QobnVtYmVyKSB7XG4gICAgdmFyIGludFZhbHVlID0gdGhpcy5pbnRWYWx1ZSxcbiAgICAgICAgX3NldHRpbmdzID0gdGhpcy5zLFxuICAgICAgICBfcHJlY2lzaW9uID0gdGhpcy5wO1xuICAgIHJldHVybiBjdXJyZW5jeSgoaW50VmFsdWUgLT0gcGFyc2UobnVtYmVyLCBfc2V0dGluZ3MpKSAvIChfc2V0dGluZ3MuZnJvbUNlbnRzID8gMSA6IF9wcmVjaXNpb24pLCBfc2V0dGluZ3MpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHZhbHVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICAgKiBAcmV0dXJucyB7Y3VycmVuY3l9XG4gICAqL1xuICBtdWx0aXBseTogZnVuY3Rpb24gbXVsdGlwbHkobnVtYmVyKSB7XG4gICAgdmFyIGludFZhbHVlID0gdGhpcy5pbnRWYWx1ZSxcbiAgICAgICAgX3NldHRpbmdzID0gdGhpcy5zO1xuICAgIHJldHVybiBjdXJyZW5jeSgoaW50VmFsdWUgKj0gbnVtYmVyKSAvIChfc2V0dGluZ3MuZnJvbUNlbnRzID8gMSA6IHBvdyhfc2V0dGluZ3MucHJlY2lzaW9uKSksIF9zZXR0aW5ncyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpdmlkZXMgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAgICogQHJldHVybnMge2N1cnJlbmN5fVxuICAgKi9cbiAgZGl2aWRlOiBmdW5jdGlvbiBkaXZpZGUobnVtYmVyKSB7XG4gICAgdmFyIGludFZhbHVlID0gdGhpcy5pbnRWYWx1ZSxcbiAgICAgICAgX3NldHRpbmdzID0gdGhpcy5zO1xuICAgIHJldHVybiBjdXJyZW5jeShpbnRWYWx1ZSAvPSBwYXJzZShudW1iZXIsIF9zZXR0aW5ncywgZmFsc2UpLCBfc2V0dGluZ3MpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUYWtlcyB0aGUgY3VycmVuY3kgYW1vdW50IGFuZCBkaXN0cmlidXRlcyB0aGUgdmFsdWVzIGV2ZW5seS4gQW55IGV4dHJhIHBlbm5pZXNcbiAgICogbGVmdCBvdmVyIGZyb20gdGhlIGRpc3RyaWJ1dGlvbiB3aWxsIGJlIHN0YWNrZWQgb250byB0aGUgZmlyc3Qgc2V0IG9mIGVudHJpZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICAgKiBAcmV0dXJucyB7YXJyYXl9XG4gICAqL1xuICBkaXN0cmlidXRlOiBmdW5jdGlvbiBkaXN0cmlidXRlKGNvdW50KSB7XG4gICAgdmFyIGludFZhbHVlID0gdGhpcy5pbnRWYWx1ZSxcbiAgICAgICAgX3ByZWNpc2lvbiA9IHRoaXMucCxcbiAgICAgICAgX3NldHRpbmdzID0gdGhpcy5zLFxuICAgICAgICBkaXN0cmlidXRpb24gPSBbXSxcbiAgICAgICAgc3BsaXQgPSBNYXRoW2ludFZhbHVlID49IDAgPyAnZmxvb3InIDogJ2NlaWwnXShpbnRWYWx1ZSAvIGNvdW50KSxcbiAgICAgICAgcGVubmllcyA9IE1hdGguYWJzKGludFZhbHVlIC0gc3BsaXQgKiBjb3VudCksXG4gICAgICAgIHByZWNpc2lvbiA9IF9zZXR0aW5ncy5mcm9tQ2VudHMgPyAxIDogX3ByZWNpc2lvbjtcblxuICAgIGZvciAoOyBjb3VudCAhPT0gMDsgY291bnQtLSkge1xuICAgICAgdmFyIGl0ZW0gPSBjdXJyZW5jeShzcGxpdCAvIHByZWNpc2lvbiwgX3NldHRpbmdzKTsgLy8gQWRkIGFueSBsZWZ0IG92ZXIgcGVubmllc1xuXG4gICAgICBwZW5uaWVzLS0gPiAwICYmIChpdGVtID0gaXRlbVtpbnRWYWx1ZSA+PSAwID8gJ2FkZCcgOiAnc3VidHJhY3QnXSgxIC8gcHJlY2lzaW9uKSk7XG4gICAgICBkaXN0cmlidXRpb24ucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlzdHJpYnV0aW9uO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkb2xsYXIgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBkb2xsYXJzOiBmdW5jdGlvbiBkb2xsYXJzKCkge1xuICAgIHJldHVybiB+fnRoaXMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNlbnQgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBjZW50czogZnVuY3Rpb24gY2VudHMoKSB7XG4gICAgdmFyIGludFZhbHVlID0gdGhpcy5pbnRWYWx1ZSxcbiAgICAgICAgX3ByZWNpc2lvbiA9IHRoaXMucDtcbiAgICByZXR1cm4gfn4oaW50VmFsdWUgJSBfcHJlY2lzaW9uKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9ybWF0cyB0aGUgdmFsdWUgYXMgYSBzdHJpbmcgYWNjb3JkaW5nIHRvIHRoZSBmb3JtYXR0aW5nIHNldHRpbmdzLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVzZVN5bWJvbCAtIGZvcm1hdCB3aXRoIGN1cnJlbmN5IHN5bWJvbFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQob3B0aW9ucykge1xuICAgIHZhciBfc2V0dGluZ3MgPSB0aGlzLnM7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBvcHRpb25zKHRoaXMsIF9zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9zZXR0aW5ncy5mb3JtYXQodGhpcywgT2JqZWN0LmFzc2lnbih7fSwgX3NldHRpbmdzLCBvcHRpb25zKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvcm1hdHMgdGhlIHZhbHVlIGFzIGEgc3RyaW5nIGFjY29yZGluZyB0byB0aGUgZm9ybWF0dGluZyBzZXR0aW5ncy5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgaW50VmFsdWUgPSB0aGlzLmludFZhbHVlLFxuICAgICAgICBfcHJlY2lzaW9uID0gdGhpcy5wLFxuICAgICAgICBfc2V0dGluZ3MgPSB0aGlzLnM7XG4gICAgcmV0dXJuIHJvdW5kaW5nKGludFZhbHVlIC8gX3ByZWNpc2lvbiwgX3NldHRpbmdzLmluY3JlbWVudCkudG9GaXhlZChfc2V0dGluZ3MucHJlY2lzaW9uKTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsdWUgZm9yIEpTT04gc2VyaWFsaXphdGlvbi5cbiAgICogQHJldHVybnMge2Zsb2F0fVxuICAgKi9cbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGN1cnJlbmN5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/currency.js/dist/currency.es.js\n");

/***/ })

};
;